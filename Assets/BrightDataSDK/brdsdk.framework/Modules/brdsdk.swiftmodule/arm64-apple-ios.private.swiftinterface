// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name brdsdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Compression
import CoreGraphics
import Darwin
import Dispatch
import Foundation
import Network
import ScreenTime
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_exported import brdsdk
extension UIKit.UIColor {
  @objc dynamic public class func fromInt(_ hex: Swift.Int) -> UIKit.UIColor?
  @objc dynamic public class func fromString(_ hexString: Swift.String?) -> UIKit.UIColor?
  public func toString() -> Swift.String
}
extension Swift.Int {
  public func toHex() -> Swift.String
}
public enum Language : Swift.String, Swift.CaseIterable {
  case de, en, es, fr, it, pt, ru, zh, hi, ja, nl, tr
  case ar, fa, he, id, ko, ms, ro, th, vi, zhTW
  public var extendedCode: Swift.String {
    get
  }
  public var label: Swift.String {
    get
  }
  public static var current: brdsdk.Language {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [brdsdk.Language]
  public typealias RawValue = Swift.String
  public static var allCases: [brdsdk.Language] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class SSLService : brdsdk.SSLServiceDelegate {
  public struct SSLReadWriteDispatcher {
  }
  public struct Configuration {
    public var serverNameIndication: Swift.String? {
      get
    }
    public var caCertificateFilePath: Swift.String? {
      get
    }
    public var caCertificateDirPath: Swift.String? {
      get
    }
    public var certificateFilePath: Swift.String? {
      get
    }
    public var keyFilePath: Swift.String? {
      get
    }
    public var certificateChainFilePath: Swift.String? {
      get
    }
    public var certificateString: Swift.String? {
      get
    }
    public var certsAreSelfSigned: Swift.Bool {
      get
    }
    public var clientAllowsSelfSignedCertificates: Swift.Bool {
      get
    }
    public var cipherSuite: Swift.String
    public var useDefaultCiphers: Swift.Bool
    public var password: Swift.String?
    public var noBackingCertificates: Swift.Bool {
      get
    }
    public var embeddedServerCertPaths: [Foundation.URL]? {
      get
    }
    public init(withSNI: Swift.String)
    public init(withCipherSuite cipherSuite: Swift.String? = nil, clientAllowsSelfSignedCertificates: Swift.Bool = true, embeddedServerCertPaths: [Foundation.URL]? = nil)
    public init(withCACertificateFilePath caCertificateFilePath: Swift.String?, usingCertificateFile certificateFilePath: Swift.String?, withKeyFile keyFilePath: Swift.String? = nil, usingSelfSignedCerts selfSigned: Swift.Bool = true, cipherSuite: Swift.String? = nil)
    public init(withCACertificateDirectory caCertificateDirPath: Swift.String?, usingCertificateFile certificateFilePath: Swift.String?, withKeyFile keyFilePath: Swift.String? = nil, usingSelfSignedCerts selfSigned: Swift.Bool = true, cipherSuite: Swift.String? = nil)
    public init(withChainFilePath chainFilePath: Swift.String?, withPassword password: Swift.String? = nil, usingSelfSignedCerts selfSigned: Swift.Bool = true, clientAllowsSelfSignedCertificates: Swift.Bool = false, cipherSuite: Swift.String? = nil)
  }
  public var verifyCallback: ((_ service: brdsdk.SSLService) -> (Swift.Bool, Swift.String?))?
  public var skipVerification: Swift.Bool
  public var configuration: brdsdk.SSLService.Configuration {
    get
  }
  public var isServer: Swift.Bool {
    get
  }
  public var rwDispatch: brdsdk.SSLService.SSLReadWriteDispatcher {
    get
  }
  public var socketPtr: Swift.UnsafeMutablePointer<Swift.Int32> {
    get
  }
  public var context: Security.SSLContext? {
    get
  }
  public init?(usingConfiguration config: brdsdk.SSLService.Configuration) throws
  public func initialize(asServer: Swift.Bool) throws
  public func deinitialize()
  public func onAccept(socket: brdsdk.Socket) throws
  public func onConnect(socket: brdsdk.Socket) throws
  public func send(buffer: Swift.UnsafeRawPointer, bufSize: Swift.Int) throws -> Swift.Int
  public func recv(buffer: Swift.UnsafeMutableRawPointer, bufSize: Swift.Int) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DNSResolver {
  public static let shared: brdsdk.DNSResolver
  @available(macOS, obsoleted: 10.14, message: "Use `resolve` method with completion")
  @available(iOS, obsoleted: 12, message: "Use `resolve` method with completion")
  public func resolve(_ host: Swift.String, onPort port: Swift.UInt16 = 443, completion: @escaping ([Swift.String]) -> Swift.Void)
  @available(macOS 10.14, iOS 12, *)
  public func resolve(_ host: Swift.String, onPort port: Swift.UInt16 = 443, through interface: Network.NWInterface? = nil, completion: @escaping ([Swift.String]) -> Swift.Void)
  @available(macOS, obsoleted: 10.14, message: "Use `resolve` method with completion")
  @available(iOS, obsoleted: 12, message: "Use `resolve` method with completion")
  public func resolveSync(_ host: Swift.String, onPort port: Swift.UInt16 = 443) -> [Swift.String]
  @available(macOS 10.14, iOS 12, *)
  @available(*, deprecated, message: "Use `resolve` method with completion")
  public func resolveSync(_ host: Swift.String, onPort port: Swift.UInt16 = 443, through interface: Network.NWInterface? = nil) -> [Swift.String]
  @objc deinit
}
@available(macOS 10.14, iOS 12, *)
extension Network.IPv4Address {
  public var toString: Swift.String? {
    get
  }
}
@available(macOS 10.14, iOS 12, *)
extension Network.IPv6Address {
  public var toString: Swift.String? {
    get
  }
}
@available(macOS 10.14, iOS 12, *)
extension Network.NWEndpoint.Host {
  public var ipString: Swift.String? {
    get
  }
}
@objc public enum Choice : Swift.Int, Swift.CaseIterable {
  case none = 0
  case peer = 1
  case notPeer = 2
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [brdsdk.Choice]
  public typealias RawValue = Swift.Int
  public static var allCases: [brdsdk.Choice] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol brd_api_protocol {
  static func initialize(benefit: Swift.String?, agree_btn: Swift.String?, disagree_btn: Swift.String?, opt_out_instructions: Swift.String?, language: Swift.String?, colors: brdsdk.ColorSettings?, background_image: brdsdk.ConsentBackgroundImage?, opt_in_info: brdsdk.ConsentActionInfo?, opt_out_info: brdsdk.ConsentActionInfo?, skip_consent: Swift.Bool, on_choice_change: ((Swift.Int) -> Swift.Void)?) throws
  static func get_choice() -> Swift.Int
  static func opt_out()
  @discardableResult
  static func show_consent(_ parent: UIKit.UIViewController?, benefit: Swift.String?, agree_btn: Swift.String?, disagree_btn: Swift.String?, language: Swift.String?) -> Swift.Bool
}
@objc public class ColorSettings : ObjectiveC.NSObject {
  final public let text_color: UIKit.UIColor?
  final public let background_color: UIKit.UIColor?
  final public let button_color: UIKit.UIColor?
  @objc public init(text_color: UIKit.UIColor?, background_color: UIKit.UIColor?, button_color: UIKit.UIColor?)
  @objc deinit
}
@objc @objcMembers public class ConsentBackgroundImage : ObjectiveC.NSObject {
  @objc final public let portrait: UIKit.UIImage
  @objc final public let landscape: UIKit.UIImage
  @objc final public let scaleMode: UIKit.UIView.ContentMode
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init(portrait: UIKit.UIImage, landscape: UIKit.UIImage? = nil, scaleMode: UIKit.UIView.ContentMode = .scaleAspectFill)
  @objc public init?(portraitName: Swift.String, landscapeName: Swift.String? = nil, scaleMode: UIKit.UIView.ContentMode = .scaleAspectFill, in bundle: Foundation.Bundle = .main)
  @objc deinit
}
@objc @objcMembers final public class ConsentActionInfo : ObjectiveC.NSObject {
  @objc final public let backgroundImage: UIKit.UIImage?
  @objc final public let textImage: UIKit.UIImage?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc public init(backgroundImage: UIKit.UIImage?, textImage: UIKit.UIImage?)
  @objc public init(backgroundName: Swift.String?, textName: Swift.String? = nil, in bundle: Foundation.Bundle = .main)
  @objc deinit
}
public protocol brd_api_internal : brdsdk.brd_api_protocol {
  static func clear_choice()
  static func setup_language(_ lang: Swift.String?)
  static func save_choice(_ value: brdsdk.Choice)
}
@objc public class brd_api : ObjectiveC.NSObject, brdsdk.brd_api_protocol {
  public enum api_error : Foundation.LocalizedError {
    case init_error(Swift.String)
    case opt_in_not_allowed
    case sdk_not_initialized
    case enabled_parent_control
    public var errorDescription: Swift.String? {
      get
    }
  }
  @objc(BrightAPIAuthorizationStatus) public enum AuthorizationStatus : Swift.Int {
    case authorized = 0
    case sdkNotInitialized = -1
    case parentControlEnabled = -2
    case onlySDKConsent = -3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func get_choice() -> Swift.Int
  @objc public static func get_uuid() -> Swift.String?
  @available(*, deprecated, renamed: "silent_opt_in()")
  public static func opt_in()
  @objc public static func silent_opt_in() throws
  public static func subscribe_on_bw_change(_ block: (([brdsdk.BWStatus]) -> Swift.Void)?)
  @objc public static func opt_out()
  @objc public static func clear_choice()
  public static func subscribe(_ key: Swift.String, listener: @escaping (Swift.AnyObject?, Swift.Int) -> ())
  @discardableResult
  @objc public init(benefit: Swift.String? = nil, agree_btn: Swift.String? = nil, disagree_btn: Swift.String? = nil, opt_out_instructions: Swift.String? = nil, tracking_id: Swift.String? = nil, cwd _cwd: Foundation.URL? = nil, sys_app_id: Swift.String? = nil, language: Swift.String? = nil, colors: brdsdk.ColorSettings? = nil, background_image: brdsdk.ConsentBackgroundImage? = nil, opt_in_info: brdsdk.ConsentActionInfo? = nil, opt_out_info: brdsdk.ConsentActionInfo? = nil, skip_consent: Swift.Bool, on_choice_change: ((Swift.Int) -> Swift.Void)? = nil) throws
  public static func setup_language(_ lang: Swift.String?)
  @available(*, deprecated, message: "Use `set_network_priorities(handler:)` instead")
  public func use_network_only(with types: [brdsdk.net_if_type]?)
  public func set_network_priorities(handler: @escaping brdsdk.InterfacesPriorityHandler)
  @objc public static func consent_shown() -> Swift.Bool
  @objc public static func authorizeDevice() -> brdsdk.brd_api.AuthorizationStatus
  @objc deinit
}
extension brdsdk.brd_api {
  public static func initialize(benefit: Swift.String? = nil, agree_btn: Swift.String? = nil, disagree_btn: Swift.String? = nil, opt_out_instructions: Swift.String? = nil, language: Swift.String? = nil, colors: brdsdk.ColorSettings? = nil, background_image: brdsdk.ConsentBackgroundImage? = nil, opt_in_info: brdsdk.ConsentActionInfo? = nil, opt_out_info: brdsdk.ConsentActionInfo? = nil, skip_consent: Swift.Bool, on_choice_change: ((Swift.Int) -> Swift.Void)?) throws
  @available(*, deprecated, renamed: "init(benefit:agree_btn:disagree_btn:tracking_id:cwd:sys_app_id:language:skip_consent:on_choice_change:)")
  convenience public init(benefit_txt: Swift.String? = nil, agree_btn: Swift.String? = nil, disagree_btn: Swift.String? = nil, tracking_id: Swift.String? = nil, cwd: Foundation.URL? = nil, sys_app_id: Swift.String? = nil, language: Swift.String? = nil, skip_consent: Swift.Bool, on_choice_change: ((Swift.Int) -> Swift.Void)? = nil) throws
}
public let country2tz: [Swift.String : [Swift.String]]
public class svc {
  public var choice_changed: brdsdk.Event<Swift.Void>?
  public init(perf_metric_prefix: Swift.String? = nil)
  @objc deinit
  public func start(_ from: Swift.String)
  public func stop(_ from: Swift.String)
}
public protocol SocketReader {
  func readString() throws -> Swift.String?
  func read(into data: inout Foundation.Data) throws -> Swift.Int
  func read(into data: Foundation.NSMutableData) throws -> Swift.Int
}
public protocol SocketWriter {
  @discardableResult
  func write(from data: Foundation.Data) throws -> Swift.Int
  @discardableResult
  func write(from data: Foundation.NSData) throws -> Swift.Int
  @discardableResult
  func write(from string: Swift.String) throws -> Swift.Int
}
public protocol SSLServiceDelegate {
  func initialize(asServer: Swift.Bool) throws
  func deinitialize()
  func onAccept(socket: brdsdk.Socket) throws
  func onConnect(socket: brdsdk.Socket) throws
  func send(buffer: Swift.UnsafeRawPointer, bufSize: Swift.Int) throws -> Swift.Int
  func recv(buffer: Swift.UnsafeMutableRawPointer, bufSize: Swift.Int) throws -> Swift.Int
}
public enum SSLError : Swift.Error, Swift.CustomStringConvertible {
  case success
  case retryNeeded
  case fail(Swift.Int, Swift.String)
  public var errCode: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension Swift.String {
  public func matches(for regex: Foundation.NSRegularExpression) -> [Swift.String]?
  public func matches(pattern: Swift.String, options: Foundation.NSRegularExpression.Options = []) -> [Swift.String]?
  public func toPointer() -> Swift.UnsafePointer<Swift.Int8>?
}
extension Foundation.URL {
  public var mdate: Foundation.Date? {
    get
  }
}
public typealias Runnable = () -> ()
public func size<T>(of type: T.Type) -> Swift.Int
@_hasMissingDesignatedInitializers final public class CpuUsage {
  final public func current() -> Swift.Double?
  @objc deinit
}
extension Darwin.fd_set {
  public mutating func zero()
  public mutating func set(_ fd: Swift.Int32)
  public mutating func clear(_ fd: Swift.Int32)
  public mutating func isSet(_ fd: Swift.Int32) -> Swift.Bool
}
extension brdsdk.brd_api {
  @discardableResult
  @objc public static func show_consent(_ parent: UIKit.UIViewController? = nil, benefit: Swift.String? = nil, agree_btn: Swift.String? = nil, disagree_btn: Swift.String? = nil, language: Swift.String? = nil) -> Swift.Bool
}
public protocol FloatPattern {
  associatedtype I : Swift.FixedWidthInteger
  @inlinable var bitPattern: Self.I { get }
  @inlinable init(bitPattern: Self.I)
}
extension Swift.Float : brdsdk.FloatPattern {
  public typealias I = Swift.UInt32
}
extension Swift.Double : brdsdk.FloatPattern {
  public typealias I = Swift.UInt64
}
@available(macOS 10.11, *)
extension Foundation.Data {
  public func compress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public func decompress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public enum CompressionAlgorithm {
    case zlib
    case lzfse
    case lzma
    case lz4
    public static func == (a: Foundation.Data.CompressionAlgorithm, b: Foundation.Data.CompressionAlgorithm) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func deflate() -> Foundation.Data?
  public func inflate() -> Foundation.Data?
  public func zip() -> Foundation.Data?
  public func unzip(skipCheckSumValidation: Swift.Bool = true) -> Foundation.Data?
  public func gzip() -> Foundation.Data?
  public func gunzip() -> Foundation.Data?
  public func adler32() -> brdsdk.Adler32
  public func crc32() -> brdsdk.Crc32
}
public struct Crc32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public struct Adler32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public protocol Disposable {
  func dispose()
}
open class Event<T> {
  public typealias EventHandler = (T) -> ()
  public init()
  public func raise(data: T)
  public func has_handlers() -> Swift.Bool
  public func addHandler<U>(target: U, handler: @escaping (U) -> brdsdk.Event<T>.EventHandler) -> brdsdk.Disposable where U : AnyObject
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class peer_dialog : brdsdk.abstract_peer_dialog {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class abstract_peer_dialog : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol RNCryptorType {
  init(password: Swift.String)
  func update(withData data: Foundation.Data) throws -> Foundation.Data
  func finalData() throws -> Foundation.Data
}
public enum RNCryptor {
  public enum Error : Swift.Int, Swift.Error {
    case hmacMismatch
    case unknownHeader
    case messageTooShort
    case memoryFailure
    case invalidCredentialType
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func encrypt(data: Foundation.Data, withPassword password: Swift.String) -> Foundation.Data
  public static func decrypt(data: Foundation.Data, withPassword password: Swift.String) throws -> Foundation.Data
  public static func randomData(ofLength length: Swift.Int) -> Foundation.Data
  final public class Encryptor : brdsdk.RNCryptorType {
    public init(password: Swift.String)
    final public func update(withData data: Foundation.Data) -> Foundation.Data
    final public func finalData() -> Foundation.Data
    final public func encrypt(data: Foundation.Data) -> Foundation.Data
    @objc deinit
  }
  final public class Decryptor : brdsdk.RNCryptorType {
    public init(password: Swift.String)
    final public func decrypt(data: Foundation.Data) throws -> Foundation.Data
    final public func update(withData data: Foundation.Data) throws -> Foundation.Data
    final public func finalData() throws -> Foundation.Data
    @objc deinit
  }
}
extension brdsdk.RNCryptor {
  @_hasMissingDesignatedInitializers final public class FormatV3 {
    public static let keySize: Swift.Int
    public static let saltSize: Swift.Int
    public static func makeKey(forPassword password: Swift.String, withSalt salt: Foundation.Data) -> Foundation.Data
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class EncryptorV3 : brdsdk.RNCryptorType {
    convenience public init(password: Swift.String)
    convenience public init(encryptionKey: Foundation.Data, hmacKey: Foundation.Data)
    final public func encrypt(data: Foundation.Data) -> Foundation.Data
    final public func update(withData data: Foundation.Data) -> Foundation.Data
    final public func finalData() -> Foundation.Data
    @objc deinit
  }
  final public class DecryptorV3 {
    public init(password: Swift.String)
    public init(encryptionKey: Foundation.Data, hmacKey: Foundation.Data)
    final public func decrypt(data: Foundation.Data) throws -> Foundation.Data
    final public func update(withData data: Foundation.Data) throws -> Foundation.Data
    final public func finalData() throws -> Foundation.Data
    @objc deinit
  }
}
public struct BWStatus {
  public let type: Swift.String
  public var total: Swift.UInt64 {
    get
  }
  public var oneTimeChange: Swift.UInt64 {
    get
  }
}
public enum net_if_type : Swift.String, Swift.Codable {
  case loopback, eth, wifi, cellular, other, unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension brdsdk.net_if_type {
  public struct UsagePriority : Swift.RawRepresentable, Swift.Comparable {
    public var rawValue: Swift.UInt
    public static let off: brdsdk.net_if_type.UsagePriority
    public static let high: brdsdk.net_if_type.UsagePriority
    public static let required: brdsdk.net_if_type.UsagePriority
    public init(rawValue: Swift.UInt)
    public static func < (lhs: brdsdk.net_if_type.UsagePriority, rhs: brdsdk.net_if_type.UsagePriority) -> Swift.Bool
    public typealias RawValue = Swift.UInt
  }
}
public typealias InterfacesPriorityHandler = (brdsdk.net_if_type) -> brdsdk.net_if_type.UsagePriority
extension brdsdk.Socket {
  public func http_resp(code: Swift.Int, status: Swift.String, headers: [Swift.String : Swift.String]? = nil) throws
  public func isReadable(waitForever: Swift.Bool = false, timeout: Swift.UInt = 0) throws -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Socket : brdsdk.SocketReader, brdsdk.SocketWriter {
  public var name: Swift.String?
  public var linked: brdsdk.Socket?
  public static let SOCKET_MINIMUM_READ_BUFFER_SIZE: Swift.Int
  public static let SOCKET_DEFAULT_READ_BUFFER_SIZE: Swift.Int
  public static let SOCKET_DEFAULT_SSL_READ_BUFFER_SIZE: Swift.Int
  public static let SOCKET_MAXIMUM_SSL_READ_BUFFER_SIZE: Swift.Int
  public static let SOCKET_DEFAULT_MAX_BACKLOG: Swift.Int
  public static let SOCKET_MAX_DARWIN_BACKLOG: Swift.Int
  public static let SOCKET_INVALID_PORT: Swift.Int32
  public static let SOCKET_INVALID_DESCRIPTOR: Swift.Int32
  public static let INADDR_ANY: Darwin.in_addr_t
  public static let NO_HOSTNAME: Swift.String
  public static let SOCKET_ERR_DOMAIN: Swift.String
  public static let SOCKET_ERR_UNABLE_TO_CREATE_SOCKET: Swift.Int
  public static let SOCKET_ERR_BAD_DESCRIPTOR: Swift.Int
  public static let SOCKET_ERR_ALREADY_CONNECTED: Swift.Int
  public static let SOCKET_ERR_NOT_CONNECTED: Swift.Int
  public static let SOCKET_ERR_NOT_LISTENING: Swift.Int
  public static let SOCKET_ERR_ACCEPT_FAILED: Swift.Int
  public static let SOCKET_ERR_SETSOCKOPT_FAILED: Swift.Int
  public static let SOCKET_ERR_BIND_FAILED: Swift.Int
  public static let SOCKET_ERR_INVALID_HOSTNAME: Swift.Int
  public static let SOCKET_ERR_INVALID_PORT: Swift.Int
  public static let SOCKET_ERR_GETADDRINFO_FAILED: Swift.Int
  public static let SOCKET_ERR_CONNECT_FAILED: Swift.Int
  public static let SOCKET_ERR_MISSING_CONNECTION_DATA: Swift.Int
  public static let SOCKET_ERR_SELECT_FAILED: Swift.Int
  public static let SOCKET_ERR_LISTEN_FAILED: Swift.Int
  public static let SOCKET_ERR_INVALID_BUFFER: Swift.Int
  public static let SOCKET_ERR_INVALID_BUFFER_SIZE: Swift.Int
  public static let SOCKET_ERR_RECV_FAILED: Swift.Int
  public static let SOCKET_ERR_RECV_BUFFER_TOO_SMALL: Swift.Int
  public static let SOCKET_ERR_WRITE_FAILED: Swift.Int
  public static let SOCKET_ERR_GET_FCNTL_FAILED: Swift.Int
  public static let SOCKET_ERR_SET_FCNTL_FAILED: Swift.Int
  public static let SOCKET_ERR_NOT_IMPLEMENTED: Swift.Int
  public static let SOCKET_ERR_NOT_SUPPORTED_YET: Swift.Int
  public static let SOCKET_ERR_BAD_SIGNATURE_PARAMETERS: Swift.Int
  public static let SOCKET_ERR_INTERNAL: Swift.Int
  public static let SOCKET_ERR_WRONG_PROTOCOL: Swift.Int
  public static let SOCKET_ERR_NOT_ACTIVE: Swift.Int
  public static let SOCKET_ERR_CONNECTION_RESET: Swift.Int
  public static let SOCKET_ERR_SET_RECV_TIMEOUT_FAILED: Swift.Int
  public static let SOCKET_ERR_SET_WRITE_TIMEOUT_FAILED: Swift.Int
  public static let SOCKET_ERR_CONNECT_TIMEOUT: Swift.Int
  public static let SOCKET_ERR_GETSOCKOPT_FAILED: Swift.Int
  public static let SOCKET_ERR_INVALID_DELEGATE_CALL: Swift.Int
  public static let SOCKET_ERR_MISSING_SIGNATURE: Swift.Int
  public static let SOCKET_ERR_PARAMETER_ERROR: Swift.Int
  public static let isLittleEndian: Swift.Bool
  public enum ProtocolFamily {
    case inet
    case inet6
    case unix
    public static func == (a: brdsdk.Socket.ProtocolFamily, b: brdsdk.Socket.ProtocolFamily) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SocketType {
    case stream
    case datagram
    public static func == (a: brdsdk.Socket.SocketType, b: brdsdk.Socket.SocketType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SocketProtocol : Swift.Int32 {
    case tcp
    case udp
    case unix
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum Address {
    case ipv4(Darwin.sockaddr_in)
    case ipv6(Darwin.sockaddr_in6)
    case unix(Darwin.sockaddr_un)
    public var size: Swift.Int {
      get
    }
    public var family: brdsdk.Socket.ProtocolFamily {
      get
    }
  }
  public struct Signature : Swift.CustomStringConvertible {
    public var protocolFamily: brdsdk.Socket.ProtocolFamily {
      get
    }
    public var socketType: brdsdk.Socket.SocketType {
      get
    }
    public var proto: brdsdk.Socket.SocketProtocol {
      get
    }
    public var hostname: Swift.String? {
      get
    }
    public var port: Swift.Int32 {
      get
    }
    public var path: Swift.String? {
      get
    }
    public var address: brdsdk.Socket.Address? {
      get
    }
    public var isSecure: Swift.Bool {
      get
    }
    public var isBound: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
    public init?(protocolFamily: Swift.Int32, socketType: Swift.Int32, proto: Swift.Int32, address: brdsdk.Socket.Address?) throws
    public init?(socketType: brdsdk.Socket.SocketType, proto: brdsdk.Socket.SocketProtocol, address: brdsdk.Socket.Address, hostname: Swift.String?, port: Swift.Int32?) throws
    public init?(protocolFamily: brdsdk.Socket.ProtocolFamily, socketType: brdsdk.Socket.SocketType, proto: brdsdk.Socket.SocketProtocol, hostname: Swift.String?, port: Swift.Int32?) throws
    public init?(socketType: brdsdk.Socket.SocketType, proto: brdsdk.Socket.SocketProtocol, path: Swift.String?) throws
  }
  public struct Error : Swift.Error, Swift.CustomStringConvertible {
    public let domain: Swift.String
    public var errorCode: Swift.Int32 {
      get
    }
    public var errorReason: Swift.String? {
      get
    }
    public var description: Swift.String {
      get
    }
    public var bufferSizeNeeded: Swift.Int32 {
      get
    }
  }
  public var socketfd: Swift.Int32 {
    get
  }
  public var signature: brdsdk.Socket.Signature? {
    get
  }
  public var delegate: brdsdk.SSLServiceDelegate? {
    get
    set
  }
  public var readBufferSize: Swift.Int {
    get
    set
  }
  public var maxBacklogSize: Swift.Int
  public var isConnected: Swift.Bool {
    get
  }
  public var isBlocking: Swift.Bool {
    get
  }
  public var isListening: Swift.Bool {
    get
  }
  public var remoteConnectionClosed: Swift.Bool {
    get
  }
  public var isActive: Swift.Bool {
    get
  }
  public var isServer: Swift.Bool {
    get
  }
  public var isSecure: Swift.Bool {
    get
  }
  public var listeningPort: Swift.Int32 {
    get
  }
  public var remoteHostname: Swift.String {
    get
  }
  public var remotePort: Swift.Int32 {
    get
  }
  public var remotePath: Swift.String? {
    get
  }
  public class func create(family: brdsdk.Socket.ProtocolFamily = .inet, type: brdsdk.Socket.SocketType = .stream, proto: brdsdk.Socket.SocketProtocol = .tcp) throws -> brdsdk.Socket
  public class func create(connectedUsing signature: brdsdk.Socket.Signature) throws -> brdsdk.Socket
  public class func create(fromNativeHandle nativeHandle: Swift.Int32, address: brdsdk.Socket.Address?) throws -> brdsdk.Socket
  public class func hostnameAndPort(from address: brdsdk.Socket.Address) -> (hostname: Swift.String, port: Swift.Int32)?
  public class func checkStatus(for sockets: [brdsdk.Socket]) throws -> (readables: [brdsdk.Socket], writables: [brdsdk.Socket])
  public class func wait(for sockets: [brdsdk.Socket], timeout: Swift.UInt, waitForever: Swift.Bool = false) throws -> [brdsdk.Socket]?
  public class func createAddress(for host: Swift.String, on port: Swift.Int32) -> brdsdk.Socket.Address?
  @objc deinit
  public func acceptClientConnection(invokeDelegate: Swift.Bool = true) throws -> brdsdk.Socket
  public func invokeDelegateOnAccept(for newSocket: brdsdk.Socket) throws
  public func acceptConnection() throws
  public func close()
  public func connect(to host: Swift.String, port: Swift.Int32, timeout: Swift.UInt = 0, familyOnly: Swift.Bool = false) throws
  public func connect(to path: Swift.String) throws
  public func connect(using signature: brdsdk.Socket.Signature) throws
  public func listen(on port: Swift.Int, maxBacklogSize: Swift.Int = Socket.SOCKET_DEFAULT_MAX_BACKLOG, allowPortReuse: Swift.Bool = true, node: Swift.String? = nil) throws
  public func listen(on path: Swift.String, maxBacklogSize: Swift.Int = Socket.SOCKET_DEFAULT_MAX_BACKLOG) throws
  public func listen(forMessage buffer: Swift.UnsafeMutablePointer<Swift.CChar>, bufSize: Swift.Int, on port: Swift.Int, maxBacklogSize: Swift.Int = Socket.SOCKET_DEFAULT_MAX_BACKLOG) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  public func listen(forMessage data: Foundation.NSMutableData, on port: Swift.Int, maxBacklogSize: Swift.Int = Socket.SOCKET_DEFAULT_MAX_BACKLOG) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  public func listen(forMessage data: inout Foundation.Data, on port: Swift.Int, maxBacklogSize: Swift.Int = Socket.SOCKET_DEFAULT_MAX_BACKLOG) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  public func read(into buffer: Swift.UnsafeMutablePointer<Swift.CChar>, bufSize: Swift.Int, truncate: Swift.Bool = false) throws -> Swift.Int
  public func readString() throws -> Swift.String?
  public func read(into data: Foundation.NSMutableData) throws -> Swift.Int
  public func read(into data: inout Foundation.Data) throws -> Swift.Int
  public func readDatagram(into buffer: Swift.UnsafeMutablePointer<Swift.CChar>, bufSize: Swift.Int) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  public func readDatagram(into data: Foundation.NSMutableData) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  public func readDatagram(into data: inout Foundation.Data) throws -> (bytesRead: Swift.Int, address: brdsdk.Socket.Address?)
  @discardableResult
  public func write(from buffer: Swift.UnsafeRawPointer, bufSize: Swift.Int) throws -> Swift.Int
  @discardableResult
  public func write(from data: Foundation.NSData) throws -> Swift.Int
  @discardableResult
  public func write(from data: Foundation.Data) throws -> Swift.Int
  @discardableResult
  public func write(from string: Swift.String) throws -> Swift.Int
  @discardableResult
  public func write(from buffer: Swift.UnsafeRawPointer, bufSize: Swift.Int, to address: brdsdk.Socket.Address) throws -> Swift.Int
  @discardableResult
  public func write(from data: Foundation.NSData, to address: brdsdk.Socket.Address) throws -> Swift.Int
  @discardableResult
  public func write(from data: Foundation.Data, to address: brdsdk.Socket.Address) throws -> Swift.Int
  @discardableResult
  public func write(from string: Swift.String, to address: brdsdk.Socket.Address) throws -> Swift.Int
  public func isReadableOrWritable(waitForever: Swift.Bool = false, timeout: Swift.UInt = 0) throws -> (readable: Swift.Bool, writable: Swift.Bool)
  public func setBlocking(mode shouldBlock: Swift.Bool) throws
  public func setReadTimeout(value: Swift.UInt = 0) throws
  public func setWriteTimeout(value: Swift.UInt = 0) throws
  public func udpBroadcast(enable: Swift.Bool) throws
  public func lastError() -> Swift.String
}
extension brdsdk.Language : Swift.Equatable {}
extension brdsdk.Language : Swift.Hashable {}
extension brdsdk.Language : Swift.RawRepresentable {}
extension brdsdk.Choice : Swift.Equatable {}
extension brdsdk.Choice : Swift.Hashable {}
extension brdsdk.Choice : Swift.RawRepresentable {}
extension brdsdk.brd_api.AuthorizationStatus : Swift.Equatable {}
extension brdsdk.brd_api.AuthorizationStatus : Swift.Hashable {}
extension brdsdk.brd_api.AuthorizationStatus : Swift.RawRepresentable {}
@available(macOS 10.11, *)
extension Foundation.Data.CompressionAlgorithm : Swift.Equatable {}
@available(macOS 10.11, *)
extension Foundation.Data.CompressionAlgorithm : Swift.Hashable {}
extension brdsdk.RNCryptor.Error : Swift.Equatable {}
extension brdsdk.RNCryptor.Error : Swift.Hashable {}
extension brdsdk.RNCryptor.Error : Swift.RawRepresentable {}
extension brdsdk.RNCryptor.DecryptorV3 : brdsdk.RNCryptorType {}
extension brdsdk.net_if_type : Swift.Equatable {}
extension brdsdk.net_if_type : Swift.Hashable {}
extension brdsdk.net_if_type : Swift.RawRepresentable {}
extension brdsdk.Socket.ProtocolFamily : Swift.Equatable {}
extension brdsdk.Socket.ProtocolFamily : Swift.Hashable {}
extension brdsdk.Socket.SocketType : Swift.Equatable {}
extension brdsdk.Socket.SocketType : Swift.Hashable {}
extension brdsdk.Socket.SocketProtocol : Swift.Equatable {}
extension brdsdk.Socket.SocketProtocol : Swift.Hashable {}
extension brdsdk.Socket.SocketProtocol : Swift.RawRepresentable {}
